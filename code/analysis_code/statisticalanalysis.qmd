### Library
```{r}
library(tidymodels)
library(vip) #most important variables in LASSO Model
library(forcats)
library(tidyverse)
library(Metrics) #RMSE
library(rsq) #rsqured 
library(yardstick)
library(MASS) #used for AIC forward selection 
library(glmnet) #for ridge regression 
library(here)
```
 

```{r}

Sum_by_month_31701 = data.frame(Date = c("Sep","Oct","Nov","Dec","Jan","Feb"),
                          TOTAL_VAX_RATE = c(7797/12768, 7780/12768, 7755/12897, 7773/12897, 7792/12897, 7817/12897),
                          Intervention = c(1, 1, 1, 1, 1, 1),
                          Male_VAX_RATE = c(3371/5981, 3358/5981, 3368/5981, 3379/5981, 3387/5981, 3397/5981),
                          Female_VAX_RATE = c(4426/6787, 4422/6787, 4387/6916, 4394/6916, 4405/6916, 4420/6916),
                          Age_05_09_VAX_RATE = c(123/1058, 126/1058, 126/1058, 127/1058, 127/1058, 128/1058),
                          Age_10_17_VAX_RATE = c(642/1560, 635/1560, 633/1560, 637/1560, 630/1560, 629/1560),
                          Age_18_44_VAX_RATE = c(3310/5054, 3316/5054, 3313/5054, 3323/5054, 3325/5054, 3331/5054),
                          Age_45_64_VAX_RATE = c(3229/4628, 3244/4628, 3239/4628, 3259/4628, 3264/4628, 3258/4628),
                          Age_65Plus_VAX_RATE = c(2576/2886, 2570/2886, 2569/2886, 2574/2886, 2568/2886, 2572/2886),
                          TOTAL_RATE_DIFF = c(0, 7780/12768 - 7797/12768, 7755/12897 - 7780/12768, 7773/12897 - 7755/12897, 7792/12897 - 7773/12897, 7817/12897 - 7792/12897), 
                          POP_n = c(12768, 12768, 12897, 12897, 12897, 12897),
                          Vac_n = c(7797, 7780, 7755, 7773, 7792, 7817)) 

Sum_by_month_31705 = data.frame(Date = c("Sep","Oct","Nov","Dec","Jan","Feb"),
                                TOTAL_VAX_RATE = c(10383/21603, 10327/21572, 10303/21722, 10301/21887, 10337/21887, 10348/21887),                                 Intervention = c(1, 1, 1, 1, 1, 1),
                          Male_VAX_RATE = c(4394/9885, 4397/9854, 4399/10004, 4391/10004, 4403/10004, 4399/10004),
                          Female_VAX_RATE = c(5989/11718, 5930/11718, 5904/11718, 5910/11883, 5934/11883, 5949/11883),
                          Age_05_09_VAX_RATE = c(210/1639, 211/1639, 209/1639, 201/1639, 202/1639, 202/1639),
                          Age_10_17_VAX_RATE = c(1159/3311, 1171/3311, 1169/3311, 1163/3311, 1168/3311, 1167/3311),
                          Age_18_44_VAX_RATE = c(5201/11978, 5215/11978, 5239/11978, 5263/11978, 5278/11978, 5281/11978),
                          Age_45_64_VAX_RATE = c(4380/6468, 4381/6468, 4366/6468, 4364/6468, 4367/6468, 4367/6468),
                          Age_65Plus_VAX_RATE = c(2983/3497, 3000/3497, 2997/3497, 2997/3497, 2994/3497, 2989/3497), 
                          TOTAL_RATE_DIFF = c(0, 10327/21572 - 10383/21603, 10303/21722 - 10327/21572, 10301/21887 - 10303/21722, 10337/21887 - 10301/21887, 10348/21887 - 10337/21887), 
                          POP_n = c(21603, 21572, 21722, 21887, 21887, 21887),
                          Vac_n = c(10383, 10327, 10303, 10301, 10337, 10348))

Sum_by_month_31707 = data.frame(Date = c("Sep","Oct","Nov","Dec","Jan","Feb"),
                          TOTAL_VAX_RATE = c(9035/18045, 8985/18045, 8997/18045, 9005/18081, 9035/18081, 9042/18165),                                                       Intervention = c(1, 1, 1, 1, 1, 1),
                          Male_VAX_RATE = c(3698/8232, 3674/8232, 3678/8232, 3680/8232, 3684/8232, 3681/8232),
                          Female_VAX_RATE = c(5337/9813, 5311/9813, 5319/9813, 5325/9849, 5351/9849, 5361/9933),
                          Age_05_09_VAX_RATE = c(275/1583, 277/1702, 280/1702, 282/1702, 284/1702, 283/1702),
                          Age_10_17_VAX_RATE = c(1109/3001, 1120/3001, 1125/3001, 1134/3001, 1136/3001, 1142/3001),
                          Age_18_44_VAX_RATE = c(5903/11434, 5931/11434, 5943/11434, 5947/11434, 5960/11434, 5958/11434),
                          Age_45_64_VAX_RATE = c(5130/6051, 5120/6051, 5125/6051, 5123/6051, 5133/6051, 5140/6051),
                          Age_65Plus_VAX_RATE = c(4200/4259, 4204/4259, 4195/4259, 4206/4259, 4202/4259, 4189/4259), 
                          TOTAL_RATE_DIFF = c(0, 8985/18045 - 9035/18045, 8997/18045 - 8985/18045, 9005/18081 - 8997/18045, 9035/18081- 9005/18081, 9042/18165 - 9035/18081),                                                    
                          POP_n = c(18045, 18045, 18045, 18081, 18081, 18165),
                          Vac_n = c(9035, 8985, 8997, 9005, 9035, 9042)) 

Sum_by_month_30815 = data.frame(Date = c("Sep","Oct","Nov","Dec","Jan","Feb"),
                          TOTAL_VAX_RATE = c(8758/19606, 8688/19736, 8639/19736, 8593/19736, 8623/19736, 8666/19736),                                                       Intervention = c(0, 0, 0, 0, 0, 0),
                          Male_VAX_RATE = c(3526/9066, 3514/9196, 3503/9196, 3484/9196, 3489/9196, 3498/9196),
                          Female_VAX_RATE = c(5232/10540, 5174/10540, 5136/10540, 5109/10540, 5134/10540, 5168/10540),
                          Age_05_09_VAX_RATE = c(201/2388, 213/2388, 211/2480, 215/2480, 211/2480, 211/2480),
                          Age_10_17_VAX_RATE = c(1116/3604, 1113/3604, 1115/3604, 1118/3604, 1115/3604, 1114/3604),
                          Age_18_44_VAX_RATE = c(5001/13358, 5009/13358, 5020/13358, 5026/13358, 5025/13358, 5032/13358),
                          Age_45_64_VAX_RATE = c(5026/8431, 5017/8431, 5020/8431, 5009/8431, 5013/8431, 5020/8431),
                          Age_65Plus_VAX_RATE = c(2816/3590, 2825/3590, 2827/3590, 2814/3590, 2828/3590, 2832/3590),
                          TOTAL_RATE_DIFF = c(0, 8688/19736 - 8758/19606, 8639/19736 - 8688/19736, 8593/19736 - 8639/19736, 8623/19736- 8593/19736, 8666/19736 - 8623/19736),
                          POP_n = c(19606, 19736, 19736, 19736, 19736, 19736),
                          Vac_n = c(8758, 8688, 8639, 8593, 8623, 8666)) 

Sum_by_month_30907 = data.frame(Date = c("Sep","Oct","Nov","Dec","Jan","Feb"),
                          TOTAL_VAX_RATE = c(4956/9122, 4917/9189, 4888/9189, 4851/9189, 4866/9189, 4894/9189),                                                                      Intervention = c(0, 0, 0, 0, 0, 0),
                          Male_VAX_RATE = c(1947/4289, 1943/4289, 1926/4289, 1900/4289, 1913/4289, 1919/4289),
                          Female_VAX_RATE = c(3009/4833, 2974/4900, 2962/4900, 2951/4900, 2953/4900, 2975/4900),
                          Age_05_09_VAX_RATE = c(244/2174, 239/2174, 241/2174, 236/2174, 240/2174, 242/2174),
                          Age_10_17_VAX_RATE = c(1344/4070, 1358/4070, 1357/4070, 1341/4070, 1343/4070, 1335/4070),
                          Age_18_44_VAX_RATE = c(9203/14571, 9217/14571, 9238/14571, 9245/14571, 9253/14571, 9246/14571),
                          Age_45_64_VAX_RATE = c(6740/10362, 6700/10362, 6667/10362, 6626/10362, 6617/10362, 6624/10362),
                          Age_65Plus_VAX_RATE = c(6632/6995, 6633/6995, 6639/6995, 6635/6995, 6633/6995, 6623/6995), 
                          TOTAL_RATE_DIFF = c(0, 4917/9189 - 4956/9122, 4888/9189 - 4917/9189, 4851/9189 - 4888/9189, 4866/9189 - 4851/9189, 4894/9189 - 4866/9189),
                          POP_n = c(9122, 9189, 9189, 9189, 9189, 9189),
                          Vac_n = c(4956, 4917, 4888, 4851, 4866, 4894)) 


#combining all of the zip codes into one data 
combined = rbind(Sum_by_month_31701, Sum_by_month_31705, Sum_by_month_31707, Sum_by_month_30815,Sum_by_month_30907)

#multiply all rates by 100 
combined <- combined %>% 
  mutate(TOTAL_VAX_RATE = TOTAL_VAX_RATE * 100,
         Male_VAX_RATE = Male_VAX_RATE * 100,
         Female_VAX_RATE = Female_VAX_RATE * 100,
         Age_05_09_VAX_RATE = Age_05_09_VAX_RATE * 100,
         Age_10_17_VAX_RATE = Age_10_17_VAX_RATE * 100,
         Age_18_44_VAX_RATE = Age_18_44_VAX_RATE * 100,
         Age_45_64_VAX_RATE = Age_45_64_VAX_RATE * 100,
         Age_65Plus_VAX_RATE = Age_65Plus_VAX_RATE * 100,
         TOTAL_RATE_DIFF = TOTAL_RATE_DIFF * 100)

```

### Bivariate Analysis Through Linear Regression

```{r}
# fit linear model 
lm_mod <- linear_reg()

#fit model with total rate difference as outcome and total vax rate as predictor
total_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ TOTAL_VAX_RATE,
      data = combined) 
total_rate <- tidy(total_rate_fit) 
print(total_rate)

#Save Linear Regression Output Table
table1= here("results", "table1.RDS")
saveRDS(total_rate, file = table1) 
```

```{r}
#fit model with total rate difference as outcome and male vax rate as predictor
Male_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Male_VAX_RATE,
      data = combined) 
Male_rate <- tidy(Male_rate_fit) 
print(Male_rate)

#Save Linear Regression Output Table
table2= here("results", "table2.RDS")
saveRDS(Male_rate, file = table2) 
```

```{r}
#fit model with total rate difference as outcome and female vax rate as predictor
Female_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Female_VAX_RATE,
      data = combined) 
Female_rate <- tidy(Female_rate_fit) 
print(Female_rate)

#Save Linear Regression Output Table
table3= here("results", "table3.RDS")
saveRDS(Female_rate, file = table3) 
```

```{r}
#fit model with total rate difference as outcome and Age_05_09_VAX_RATE as predictor
Age_05_09_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Age_05_09_VAX_RATE,
      data = combined) 
Age_05_09_rate <- tidy(Age_05_09_rate_fit) 
print(Age_05_09_rate)

#Save Linear Regression Output Table
table4= here("results", "table4.RDS")
saveRDS(Age_05_09_rate, file = table4) 
```

```{r}
#fit model with total rate difference as outcome and Age_10_17_VAX_RATE as predictor
Age_10_17_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Age_10_17_VAX_RATE,
      data = combined) 
Age_10_17_rate <- tidy(Age_10_17_rate_fit) 
print(Age_10_17_rate)

#Save Linear Regression Output Table
table5= here("results", "table5.RDS")
saveRDS(Age_10_17_rate, file = table5) 
```

```{r}
#fit model with total rate difference as outcome and Age_18_44_VAX_ as predictor
Age_18_44_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Age_18_44_VAX_RATE,
      data = combined) 
Age_18_44_rate <- tidy(Age_18_44_rate_fit) 
print(Age_18_44_rate)

#Save Linear Regression Output Table
table6= here("results", "table6.RDS")
saveRDS(Age_18_44_rate, file = table6) 
```

```{r}
#fit model with total rate difference as outcome and Age_45_64_VAX_RATE as predictor
Age_45_64_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Age_45_64_VAX_RATE,
      data = combined) 
Age_45_64_rate <- tidy(Age_45_64_rate_fit) 
print(Age_45_64_rate)

#Save Linear Regression Output Table
table7= here("results", "table7.RDS")
saveRDS(Age_45_64_rate, file = table7) 
```

```{r}
#fit model with total rate difference as outcome and Age_65Plus_VAX_RATE as predictor
Age_65Plus_rate_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Age_65Plus_VAX_RATE,
      data = combined) 
Age_65Plus_rate <- tidy(Age_65Plus_rate_fit) 
print(Age_65Plus_rate)

#Save Linear Regression Output Table
table8= here("results", "table8.RDS")
saveRDS(Age_65Plus_rate, file = table8) 
```

```{r}
#fit model with total rate difference as outcome and Interventione as predictor
Intervention_fit <- lm_mod %>% 
  fit( TOTAL_RATE_DIFF ~ Intervention,
      data = combined) 
Intervention <- tidy(Intervention_fit) 
print(Intervention)

#Save Linear Regression Output Table
table9= here("results", "table9.RDS")
saveRDS(Intervention, file = table9) 
```


### Data splitting

```{r}
data_split = initial_split(combined, prop = 7/10, strata = TOTAL_RATE_DIFF)
```

### Splitting the data between training and testing

```{r}
train_data = training(data_split)
test_data  = testing(data_split)
```


### Doing 5-fold cross validation with 5 repeats and body temperature as the strata

```{r}
CV_fold = vfold_cv(train_data, v = 2, repeats = 5, strata = TOTAL_RATE_DIFF) 
```

### Creating a recipe and applying to the training data

```{r}
recipe <- recipe(TOTAL_RATE_DIFF ~ TOTAL_VAX_RATE + Intervention + Male_VAX_RATE + Female_VAX_RATE + Age_05_09_VAX_RATE + Age_10_17_VAX_RATE + Age_18_44_VAX_RATE + Age_45_64_VAX_RATE + Age_65Plus_VAX_RATE + Date + POP_n + Vac_n, data = train_data) %>%
  step_dummy(all_nominal(), one_hot = TRUE) #In this code, we create a recipe using step_dummy to preprocess the data and convert the categorical predictors into numeric predictors
```

## Creating a mean null model and evaluating the model for both the training data and test data

```{r}
mean_null_model <- function(combined) {
  outcome <- mean(combined$TOTAL_RATE_DIFF)
  prediction <- rep(outcome, nrow(combined))
  return(prediction)}

#using model to make predictions based on the training data and test data
train_pred <- mean_null_model(train_data)
test_pred <- mean_null_model(test_data)

#calculating rmse for the model fit to training data 
train_rmse <- rmse(train_data$TOTAL_RATE_DIFF, train_pred)
test_rmse <- rmse(test_data$TOTAL_RATE_DIFF, test_pred)

#taking a look at the rmse for both training and test data
train_rmse
test_rmse
```


## Creating a tree model and evaluating the model 
### Tuning Hyperparameters

```{r}
#tuning: the process of estimating the best values for these values by training many models on resampled data sets and exploring how well all these models perform
tune_spec <- 
  decision_tree(
    cost_complexity = tune(),
    tree_depth = tune()
  ) %>% 
  set_engine("rpart") %>% 
  set_mode("regression")
```

### Creating a grid of values

```{r}
tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = 5)
```

### Setting up a tree workflow

```{r}
tree_wf <- workflow() %>%
  add_model(tune_spec) %>%
  add_recipe(recipe)

#getting turning results 
tree_res <- 
  tree_wf %>% 
  tune_grid(
    resamples = CV_fold,
    grid = tree_grid
    )

tree_res %>%  collect_metrics()
```

### Plotting results of the tree model

```{r}
tree_res %>%
  collect_metrics() %>%
  mutate(tree_depth = factor(tree_depth)) %>%
  ggplot(aes(cost_complexity, mean, color = tree_depth)) +
  geom_line(linewidth = 1.5, alpha = 0.6) +
  geom_point(size = 2) +
  facet_wrap(~ .metric, scales = "free", nrow = 2) +
  scale_x_log10(labels = scales::label_number()) +
  scale_color_viridis_d(option = "plasma", begin = .9, end = 0)
```

### Taking a look at the best tree models based on the R\^2 values

```{r}
tree_res %>%
  show_best("rmse")

best_tree = tree_res %>%
  select_best("rmse")

best_tree
```

### Finalizing model

```{r}
final_wf <- 
  tree_wf %>% 
  finalize_workflow(best_tree)

final_wf
```

### Evaluate the final fit for the tree model

```{r}
final_fit <- 
  final_wf %>%
  last_fit(data_split) 

final_fit_metrics <- final_fit %>%
  collect_metrics()
#final fit metrics
final_fit_metrics

#creating a tibble for predicted values of model
predictions = final_fit  %>%
  collect_predictions

#plotting model predictions vs actual outcome 
plot1 = final_fit %>%
  collect_predictions  %>%
    ggplot(aes(x = .pred, y = TOTAL_RATE_DIFF)) +
  geom_smooth(method = "lm", se = FALSE) +
  xlab("Predicted Probability") +
  ylab("Actual Class") +
  ggtitle("Predicted Values vs Actual Outcome Values")
plot1

#plotting the residuals 
residuals = predictions$TOTAL_RATE_DIFF - predictions$.pred

#creating a residual data frame 
residuals_df = data.frame(TOTAL_RATE_DIFF = predictions$TOTAL_RATE_DIFF, Predictions = predictions$.pred, Residuals = residuals)

# Create a scatter plot with ggplot for residuals 
ggplot(residuals_df, aes(x = Predictions , y = Residuals)) +
  geom_point() +
  xlab("Predicted values") +
  ylab("Residuals") +
  ggtitle("Residual Plot")

```

## Fitting for LASSO model

### Building a model

```{r}
lm_mod =
  linear_reg(penalty = tune(), mixture =1) %>%
  set_engine("glmnet")
```

### Creating a workflow

```{r}
lm_workflow =
  workflow() %>%
  add_model(lm_mod)  %>%
  add_recipe(recipe)
```

### Creating a grid for tuning

```{r}
lm_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))

# lowest penalty values
lm_reg_grid %>% top_n(-5)

# highest penalty values 
lm_reg_grid %>% top_n(5)

```

### Train and tune the model

```{r}
lasso_res <- lm_workflow %>%
  tune_grid(resamples = CV_fold, grid = lm_reg_grid)
```

### Collect metrics and picking the best model

```{r}
lasso_res %>% show_best("rmse")

best_lasso = lasso_res %>%
  select_best("rmse")
best_lasso
```

### Finalizing Lasso model

```{r}
final_lasso_wf <- 
  lm_workflow %>% 
  finalize_workflow(best_lasso)

final_lasso_wf
```

